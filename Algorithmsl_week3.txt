//==========================================
//================= MONDAY =================
//==========================================
function Node(value) {
    this.val = value;
    this.next = null;
}

function SLL() {
    this.head = null;
}

var node1 = new Node(1);
var node2 = new Node(2);
var node3 = new Node(3);
var node4 = new Node(4);
var node5 = new Node(5);

node1.next = node2;
node2.next = node3;
node3.next = node4;
node4.next = node5;


var newList = new SLL();
list.head = node1;

//=============== Add Front ===============
/*
Given a pointer to the first node in a list,
and a value, create a new node, connect it to
the head of the list, and return a pointer to
the list’s new head node.
*/
function addToFront(node, value){
	var newNode = new Node(value);
	newNode.next = node;
	return newNode;
}
console.log(addToFront(node1, 6));

//=============== Remove Front ===============
/*
Given a pointer to the first node in a list,
remove the head node and return the new list.
If list is empty, return null.
*/
function removeFront(node){
	if(!node.next) {
		console.log('Null found here');
		return null;
	}
	var newHead = node.next;
	console.log('newHead is ' + newHead.val + ' ' + newHead.next);
	node.next = newHead;
}
console.log(removeFront(node2));

//=============== Contains ===============
/*
Given a pointer to a listNode and a value,
return whether value is found in any node within the list.
*/
function contains(node, value){
	var current = node;
	while(current){
		if(current.val === value){
			return true;
		}
		else {
			current = current.next;
		}
	}
	return false;
}
console.log(contains(node1, 3));

//=============== Front ===============
/*
Return the value (not the node) at the head of the
list. If list is empty, return null.
*/
function frontValue(node){
	if(!node){
		return null;
	}
	return node.val;
}
console.log(frontValue(node3));



//==========================================
//================ WEDNESDAY ===============
//==========================================

//=============== Length ===============
/*
Create a function that accepts a pointer to first
list node, and returns number of nodes in sList.
*/
function length(list){
	var leng = 0;
	if(!list){
		return null;
	}
	if(!list.head){
		return leng;
	}
	var current = list.head;
	while(current){
		leng ++;
		current = current.next;
	}
	return leng;
}
console.log(length(list));

//=============== Average ===============
/*
Create a standalone function average(node) that
returns (…wait for it … ) the average of all
values contained in that list.
*/
function average(list){
	if(!list){
		return null;
	}
	var sum = 0;
	var leng = 0;
	var current = list.head;
	while(current){
		leng++;
		sum += current.val;
		current = current.next;
	}
	return sum/leng;
}
console.log(average(list));

//=============== Min ===============
/*
Create function min(node) to return smallest value in the list.
*/
function min(list){
	if(!list){
		return null;
	}
	var min = list.head.val;
	var current = list.head;
	while(current){
		if (current.val < min){
			min = current.val;
		}
		current = current.next;
	}
	return min;
}
console.log(min(list));

//=============== Max ===============
/*
Create function max(node) to return smallest value in the list.
*/
function max(list){
	if(!list){
		return null;
	}
	var max = list.head.val;
	var current = list.head;
	while(current){
		if (current.val > max){
			max = current.val;
		}
		current = current.next;
	}
	return max;
}
console.log(max(list));

//=============== Display ===============
/*
Create display(node) for debugging that returns a
string containing all list values. Build what you
wish console.log(myList) did!
*/
function display(list){
	if(!list){
		return null;
	}
	var display = “”;
	var current = list.head;
	while(current){
		display += current.val;
		current=current.next;
	}
	return display;
}
console.log(display(list));

//=============== Remove Node ===============
/*
Create removeVal(list,value) that removes from our
list the node with the given value. Return the new list.
*/
function removeVal(list, val){
  if(list && list.head){
    var current = list.head;
    if(current.val === val){
      list.head = current.next;
      return current;
    }
    while(current.next){
      if(current.next.val === val){
        if (current.next.next === null){
          current.next = null;
        }
        var temp = current.next;
        current.next = current.next.next;
        temp.next = null;
        return temp;
      }
      current = current.next;
    }
    return list;
  }
  return null;

}

//=============== Prepend Node ===============
/*
Create prependVal(list,value,before) that inserts a listNode
with given value immediately before the node with before(value)
(or at end). Return the new list.
(1)->(2)->(3)->(4)
(list, 99, 4)
(1)->(2)->(3)->(99)->(4)
*/
function prependList(list,val,afterVal){
  var current = list;
  newNode = new Node(val);
  while(current.next){
    if(current.next.value === afterVal){
      var temp = current.next;
      current.next = newNode;
      current.next.next = temp;
      break;
    }
    current = current.next
  }
  return list;
}


//=============== Append Node ===============
/*
Create appendVal(list,value,after) that inserts a new listNode
with given value immediately after the node containing after
(or at end). Return the new list.
(1)->(2)->(3)->(4)
(list, 99, 4)
(1)->(2)->(3)->(4)->(99)
*/
function appendVal(list, val, beforeVal){
  var current = list;
  var newNode = new Node(val);
  while(current.next){
    if(current.next.value === beforeVal){
      var temp = current.next.next;
      current.next.next = newNode;
      newNode.next = temp;
      break;
    }
    current = current.next;
  }
  return list;
}
